import java.util.Map.Entry;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.commands.Command;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.Commands;
import net.dv8tion.jda.api.interactions.commands.build.OptionData;
import net.dv8tion.jda.api.requests.GatewayIntent;

public class main {

	public static void main(String[] args) throws InterruptedException 
	{
		String TOKEN = ""; //token do bot
		
		JDABuilder construtor = JDABuilder.createDefault(TOKEN);
			construtor.addEventListeners(new MeuBot());
			construtor.enableIntents(GatewayIntent.MESSAGE_CONTENT);
			
		JDA jda = construtor.build();
		jda.awaitReady();
		System.out.println("Bot iniciado com sucesso.");
		
		String guildId = ""; //id do servidor
		
		Guild guild = jda.getGuildById(guildId);
		
		if(guild != null) 
		{
			
			guild.updateCommands().addCommands(
					Commands.slash("roll-normal", "üé≤ Sorteia 1 cl√£ aleat√≥rio"),
					Commands.slash("roll-vip", "üíé Sorteia 1 de 3 cl√£s aleat√≥rios escolhidos. (VIP)")
						.addOptions(
						 new OptionData(OptionType.STRING, "clan1", "Primeiro Cl√£ escolhido.", true),
						 new OptionData(OptionType.STRING, "clan2", "Segundo Cl√£ escolhido.", true),
						 new OptionData(OptionType.STRING, "clan3", "Terceiro Cl√£ escolhido.", true)
						),
					Commands.slash("lootbox", "üé≤ Abra a sua Lootbox e ganhe itens especiais!")
						.addOption(OptionType.STRING, "tipo", "Tipo da lootbox (normal, rara ou lend√°ria)", true),
					Commands.slash("roll-bijuu", "üé≤ Sorteia 1 bijuu"),
					Commands.slash("roll-prodigio", "üé≤ Tente despertar como prod√≠gio!"),
					Commands.slash("roll-caixa", "üé≤ Sorteia 1 item da caixa escolhida.")
						.addOption(OptionType.STRING, "tipo", "Tipo da caixa (azul, vermelha ou dourada)", true),
					Commands.slash("comprar", "Compre um ou mais itens da loja!")
					.addOptions(
							 new OptionData(OptionType.STRING, "item", "Primeiro Cl√£ escolhido.", true),
							 new OptionData(OptionType.STRING, "quantidade", "Segundo Cl√£ escolhido.", true)
							),
					Commands.slash("ver-inventario", "Veja os itens que est√£o no seu invent√°rio!"),
					Commands.slash("minerar", "Que tal trabalhar minerando e ganhar $?"),
					Commands.slash("ferreiro", "Agora voc√™ pode forjar armas com seus min√©rios!")
				    .addOption(OptionType.STRING, "tipo", "Tipo do min√©rio", true),
				    Commands.slash("ver-saldo", "Veja quanto voc√™ tem na carteira!")
			).queue();
			System.out.println("Comandos adicionados com sucesso.");
		}
		if(guild == null) {
			System.out.println("Servidor n√£o encontrado.");
		}

	}

}

class MeuBot extends ListenerAdapter
{
	private final Map<Long, Long> cooldowns = new HashMap<>();
	private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
	private final long COOLDOWN_MILIS = 3 * 60 * 60 * 1000; // 3 horas
	private final Map<Long, Long> ferreiroCooldowns = new HashMap<>();
	
	class ArmaInfo {
	    int tempoHoras;
	    int poder;
	    String nome;
	    String tipoMinerio;
	    int quantidadeNecessaria;

	    ArmaInfo(int tempoHoras, int poder, String nome, String tipoMinerio, int quantidadeNecessaria) {
	        this.tempoHoras = tempoHoras;
	        this.poder = poder;
	        this.nome = nome;
	        this.tipoMinerio = tipoMinerio;
	        this.quantidadeNecessaria = quantidadeNecessaria;
	    }
	}
	
	
	@Override
	public void onSlashCommandInteraction(SlashCommandInteractionEvent event) 
	{
		switch (event.getName()) 
		{
			case "roll-normal" -> 
				{
					Clans clans = new Clans(); //Instanciar a classe Clans (obtem os clans e os gifs)
					String[] arrayClans = clans.getClans(); //obtem o array dos Clas
					String[] arrayGifsClans = clans.getGifClans(); //obtem o array dos gifs
					Random aleatorio = new Random(); //Instanciar a classe Random na variavel "aleatorio"
					int indiceAleatorio = aleatorio.nextInt(arrayClans.length); //cria o int do indice
					String clanEscolhido = arrayClans[indiceAleatorio];
					String gifDoClanEscolhido = arrayGifsClans[indiceAleatorio];
					
					EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Cl√£ Sorteado:");
					embed.setDescription("**"+clanEscolhido+"**");
					embed.setImage(gifDoClanEscolhido);
					event.replyEmbeds(embed.build()).queue();
				}
			case "roll-vip" ->
				{
					String clan1 = event.getOption("clan1") != null 
		                ? event.getOption("clan1").getAsString()
		                : event.getUser().getName(); // fallback se n√£o passar
					String clan2 = event.getOption("clan2") != null
						? event.getOption("clan2").getAsString()
						: event.getUser().getName();
					String clan3 = event.getOption("clan3") != null
						? event.getOption("clan3").getAsString()
						: event.getUser().getName();
					
					Random aleatorio = new Random();
					int indiceAleatorio = aleatorio.nextInt(3);
					
					if(indiceAleatorio == 0)
					{
						EmbedBuilder embed = new EmbedBuilder();
						embed.setTitle("üéØ Cl√£ Sorteado:");
						embed.setDescription("**"+clan1+"**");
						embed.setImage("https://giffiles.alphacoders.com/219/219784.gif");
						event.replyEmbeds(embed.build()).queue();
					}
					if(indiceAleatorio == 1)
					{
						EmbedBuilder embed = new EmbedBuilder();
						embed.setTitle("üéØ Cl√£ Sorteado:");
						embed.setDescription("**"+clan2+"**");
						embed.setImage("https://giffiles.alphacoders.com/219/219784.gif");
						event.replyEmbeds(embed.build()).queue();
					}
					if(indiceAleatorio == 2)
					{
						EmbedBuilder embed = new EmbedBuilder();
						embed.setTitle("üéØ Cl√£ Sorteado:");
						embed.setDescription("**"+clan3+"**");
						embed.setImage("https://giffiles.alphacoders.com/219/219784.gif");
						event.replyEmbeds(embed.build()).queue();
					}
				}
			case "lootbox" ->
			{
				String tipo = event.getOption("tipo") != null 
	                ? event.getOption("tipo").getAsString()
	                : event.getUser().getName(); // fallback se n√£o passar
				
				if(tipo.equals("normal")) 
				{
					LootboxNormal lootbox = new LootboxNormal();
					String item = lootbox.sorteiaLootbox("normal");
					String[] itens = lootbox.getLootBoxNormal();
					int indice = -1;
			        for (int i = 0; i < itens.length; i++) {
			            if (itens[i].equals(item)) {
			                indice = i;
			                break;
			            }
			        }
			        if (indice != -1) {
			            System.out.println("√çndice encontrado: " + indice);
			        } else {
			            System.out.println("Valor n√£o encontrado.");
			        }
			        String[] gifs = lootbox.getLootBoxNormalGif();
			        String gif = gifs[indice];
					
			        EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Item Sorteado:");
					embed.setDescription("Voc√™ abriu a Lootbox normal e ganhou: **"+item+"**");
					embed.setImage(gif);
					event.replyEmbeds(embed.build()).queue();
				}
				if(tipo.equals("rara")) 
				{
					LootboxNormal lootbox = new LootboxNormal();
					String item = lootbox.sorteiaLootbox("rara");
					String[] itens = lootbox.getLootBoxRara();
					int indice = -1;
			        for (int i = 0; i < itens.length; i++) {
			            if (itens[i].equals(item)) {
			                indice = i;
			                break;
			            }
			        }
			        if (indice != -1) {
			            System.out.println("√çndice encontrado: " + indice);
			        } else {
			            System.out.println("Valor n√£o encontrado.");
			        }
			        String[] gifs = lootbox.getLootBoxRaraGif();
			        String gif = gifs[indice];
					
			        EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Item Sorteado:");
					embed.setDescription("Voc√™ abriu a **Lootbox** Rara e ganhou: **"+item+"**");
					embed.setImage(gif);
					event.replyEmbeds(embed.build()).queue();
				}
				if(tipo.equals("lendaria")) 
				{
					LootboxNormal lootbox = new LootboxNormal();
					String item = lootbox.sorteiaLootbox("lendaria");
					String[] itens = lootbox.getLootBoxLendaria();
					int indice = -1;
			        for (int i = 0; i < itens.length; i++) {
			            if (itens[i].equals(item)) {
			                indice = i;
			                break;
			            }
			        }
			        if (indice != -1) {
			            System.out.println("√çndice encontrado: " + indice);
			        } else {
			            System.out.println("Valor n√£o encontrado.");
			        }
			        String[] gifs = lootbox.getLootBoxLendariaGif();
			        String gif = gifs[indice];
					
			        EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Item Sorteado:");
					embed.setDescription("Voc√™ abriu a Lootbox ***Lend√°ria*** e ganhou: **"+item+"**");
					embed.setImage(gif);
					event.replyEmbeds(embed.build()).queue();
				}
			}
			case "roll-bijuu" -> 
			{
				bijuus bijuu = new bijuus();
				String bijuuSorteada = bijuu.sorteiaBijuu();
				String gifBijuuSorteada = bijuu.getGif();
				
				EmbedBuilder embed = new EmbedBuilder();
				embed.setTitle("üéØ Bijuu Sorteada:");
				embed.setDescription("Parab√©ns! Voc√™ conseguiu a **"+bijuuSorteada+"**!");
				embed.setImage(gifBijuuSorteada);
				event.replyEmbeds(embed.build()).queue();
			}
			case "roll-prodigio" ->
			{
				Random indiceProdigio = new Random();
				int indiceAleatorioProdigio = indiceProdigio.nextInt(2);
				
				if(indiceAleatorioProdigio == 0) 
				{
					EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Prod√≠gio Sorteado:");
					embed.setDescription("**Voc√™ ainda n√£o mostrou sinais de prod√≠gio... Continue tentando!**");
					embed.setImage("https://64.media.tumblr.com/73259fddd0945cbff90ff82dab633723/39c8d1d0a0835079-23/s540x810/f5b0a9e20a7720c7dab389f603851101132cabc6.gif");
					event.replyEmbeds(embed.build()).queue();
				}
				
				if(indiceAleatorioProdigio == 1) 
				{
					EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Prod√≠gio Sorteado:");
					embed.setDescription("***Parab√©ns! Voc√™ despertou como prod√≠gio!***");
					embed.setImage("https://giffiles.alphacoders.com/219/219665.gif");
					event.replyEmbeds(embed.build()).queue();
				}
			}
			case "roll-caixa" ->
			{
				String tipo = event.getOption("tipo") != null 
	                ? event.getOption("tipo").getAsString()
	                : event.getUser().getName(); // fallback se n√£o passar
				
				if(tipo.equals("azul")) 
				{
					caixas cx = new caixas();
					String item = cx.sorteiaCaixaAzul();
					String gif = cx.getGif();
					
					EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Caixa Sorteada:");
					embed.setDescription("Parab√©ns! Voc√™ ganhou: ***"+item+"***");
					embed.setImage(gif);
					event.replyEmbeds(embed.build()).queue();
				}
				if(tipo.equals("vermelha")) 
				{
					caixas cx = new caixas();
					String item = cx.sorteiaCaixaVermelha();
					String gif = cx.getGif();
					
					EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Caixa Sorteada:");
					embed.setDescription("Parab√©ns! Voc√™ ganhou: ***"+item+"***");
					embed.setImage(gif);
					event.replyEmbeds(embed.build()).queue();
				}
				if(tipo.equals("dourada")) 
				{
					caixas cx = new caixas();
					String item = cx.sorteiaCaixaDourada();
					String gif = cx.getGif();
					
					EmbedBuilder embed = new EmbedBuilder();
					embed.setTitle("üéØ Caixa Sorteada:");
					embed.setDescription("Parab√©ns! Voc√™ ganhou: ***"+item+"***");
					embed.setImage(gif);
					event.replyEmbeds(embed.build()).queue();
				}
			}
			case "comprar" ->
			{
				int item = event.getOption("item") != null 
		                ? event.getOption("item").getAsInt()
		                : 1; // fallback se n√£o passar
				int quantidade = event.getOption("tipo") != null 
		                ? event.getOption("tipo").getAsInt()
		                : 1; // fallback se n√£o passar
				
				long userId = event.getUser().getIdLong();
				Inventario inv = new Inventario(userId);
				Saldo sd = new Saldo(userId);
				
				inv.verificaSaldoParaCompra(sd.getSaldo(), item, quantidade);
				
				EmbedBuilder embed = new EmbedBuilder();
				embed.setTitle("Resultado da Transa√ß√£o:");
				embed.setDescription("**"+inv.getTransacao()+"**");
				event.replyEmbeds(embed.build()).queue();
			}
			case "ver-inventario" ->
			{
				long userId = event.getUser().getIdLong();
				Inventario inv = inventarioUtils.carregarInventario(userId);
				StringBuilder resposta = new StringBuilder("Seu invent√°rio:\n");
				
				if(inv.getItens().isEmpty()) {
					resposta.append("-> Invent√°rio vazio.");
				}else {
					for(Entry<String, Integer> item : inv.getItens().entrySet()) {
						resposta.append("-> ").append(item.getKey()).append(": ").append(item.getValue()).append("\n");
						
					}
				}
				
				event.reply(resposta.toString()).queue();
			}
			case "minerar" ->
			{
				
				long userId = event.getUser().getIdLong();
			    long agora = System.currentTimeMillis();
			    long ultimoUso = cooldowns.getOrDefault(userId, 0L);
			    long tempoRestante = COOLDOWN_MILIS - (agora - ultimoUso);

			    if (tempoRestante > 0) {
			        long minutos = tempoRestante / 1000 / 60;
			        event.reply("‚è≥ Voc√™ j√° minerou! Tente novamente em **" + minutos + " minutos**.")
			             .setEphemeral(true).queue();
			        return;
			    }

			    // Registra o uso
			    cooldowns.put(userId, agora);

			    // Informa que come√ßou a minerar
			    event.reply("‚õèÔ∏è Voc√™ come√ßou a minerar! O resultado chegar√° em 3 horas via DM.")
			         .setEphemeral(true).queue();

			    // Simula minera√ß√£o
			    Random rand = new Random();
			    Map<String, Integer> minerios = new HashMap<>();
			    Inventario inv = new Inventario(userId);
			    for (int i = 0; i < 5; i++) {
			        int indiceAleatorio = rand.nextInt(1001); // 0 a 1000

			        if (indiceAleatorio <= 600) {
			            minerios.put("Ferro", minerios.getOrDefault("Ferro", 0) + 1);
			            
			            inv.adicionarItem("Ferro", 1);
			        } else if (indiceAleatorio <= 800) {
			            minerios.put("Ni√≥bio", minerios.getOrDefault("Ni√≥bio", 0) + 1);
;
			            inv.adicionarItem("Ni√≥bio", 1);
			        } else if (indiceAleatorio <= 950) {
			            minerios.put("Tungst√™nio", minerios.getOrDefault("Tungst√™nio", 0) + 1);
			            inv.adicionarItem("Tungst√™nio", 1);
			        } else {
			            minerios.put("Tit√¢nio", minerios.getOrDefault("Tit√¢nio", 0) + 1);
			            inv.adicionarItem("Tit√¢nio", 1);
			        }
			    }
			    
			    inventarioUtils invu = new inventarioUtils();
	            

			    // Agenda o envio do resultado ap√≥s 3 horas
			    scheduler.schedule(() -> {
			    	invu.salvarInventario(inv);
			        StringBuilder resposta = new StringBuilder("üíé Resultado da Minera√ß√£o:\n\n");

			        if (minerios.isEmpty()) {
			            resposta.append("-> Ocorreu um erro.");
			        } else {
			            for (Map.Entry<String, Integer> item : minerios.entrySet()) {
			                resposta.append("‚Üí ").append(item.getKey())
			                        .append(": ").append(item.getValue()).append("\n");
			            }
			        }

			        // Envia como DM
			        event.getUser().openPrivateChannel().queue(channel -> {
			            channel.sendMessage(resposta.toString()).queue();
			        });

			    }, 3, TimeUnit.HOURS);
			}
			case "ferreiro" -> {
			    long userId = event.getUser().getIdLong();
			    long agora = System.currentTimeMillis();

			    String tipo = event.getOption("tipo").getAsString().toLowerCase();

			    
			    
			    // Map com os dados de cada min√©rio
			    Map<String, ArmaInfo> tiposArmas = Map.of(
			    	    "ferro", new ArmaInfo(4, 90, "Arma de Ferro", "Ferro", 6),
			    	    "ni√≥bio", new ArmaInfo(6, 135, "Arma de Ni√≥bio", "Ni√≥bio", 5),
			    	    "tungst√™nio", new ArmaInfo(8, 225, "Arma de Tungst√™nio", "Tungst√™nio", 4),
			    	    "tit√¢nio", new ArmaInfo(10, 270, "Arma de Tit√¢nio", "Tit√¢nio", 3)
			    	);

			    if (!tiposArmas.containsKey(tipo)) {
			        event.reply("‚ùå Tipo inv√°lido. Escolha entre: Ferro, Ni√≥bio, Tungst√™nio ou Tit√¢nio.")
			             .setEphemeral(true).queue();
			        return;
			    }

			    ArmaInfo arma = tiposArmas.get(tipo);
			    long cooldownMilis = arma.tempoHoras * 60L * 60L * 1000L;
			    long ultimoUso = ferreiroCooldowns.getOrDefault(userId, 0L);
			    long tempoRestante = cooldownMilis - (agora - ultimoUso);

			    if (tempoRestante > 0) {
			        long minutos = tempoRestante / 1000 / 60;
			        event.reply("‚è≥ Voc√™ j√° est√° forjando uma arma! Tente novamente em **" + minutos + " minutos**.")
			             .setEphemeral(true).queue();
			        return;
			    }
			    
			    // Carrega o invent√°rio
			    Inventario inv = inventarioUtils.carregarInventario(userId);

			    // Verifica se tem min√©rio suficiente
			    int quantidade = inv.getItens().getOrDefault(arma.tipoMinerio, 0);
			    if (quantidade < arma.quantidadeNecessaria) {
			        event.reply("‚ùå Voc√™ precisa de " + arma.quantidadeNecessaria + "x " + arma.tipoMinerio +
			                    " para forjar " + arma.nome + ". Voc√™ s√≥ tem " + quantidade + ".")
			             .setEphemeral(true).queue();
			        return;
			    }

			    // Remove os min√©rios do invent√°rio
			    inv.removerItem(arma.tipoMinerio, arma.quantidadeNecessaria);
			    inventarioUtils.salvarInventario(inv);

			    // Registra o uso
			    ferreiroCooldowns.put(userId, agora);
			    event.reply("üî® Voc√™ come√ßou a trabalhar na sua " + arma.nome + 
			                "! E voc√™ terminar√° em " + arma.tempoHoras + " horas.")
			         .setEphemeral(true).queue();
			    
			    Saldo sd = new Saldo(userId);
			    

			    // Agenda entrega
			    scheduler.schedule(() -> {
			    	sd.adicionar(arma.poder);
			        String resultado = "üèπ Sua " + arma.nome + " foi forjada e vendida com sucesso!\n";

			        event.getUser().openPrivateChannel().queue(channel -> {
			            channel.sendMessage(resultado).queue();
			        });

			    }, arma.tempoHoras, TimeUnit.HOURS);
			}
			case "ver-saldo" ->
			{
				long userId = event.getUser().getIdLong();
				Saldo sd = new Saldo(userId);
				EmbedBuilder embed = new EmbedBuilder();
				embed.setTitle("Seu saldo:");
				embed.setDescription("Seu saldo √©: "+sd.getSaldo());
				event.replyEmbeds(embed.build()).queue();
			}
		}
		
	}
}












